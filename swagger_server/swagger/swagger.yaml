openapi: 3.0.0
info:
  title: Library App API
  description: "API for managing books, users, and rental in a library system."
  version: 1.0.0
servers:
- url: https://api.library-app.com/v1
  description: Production server
paths:
  /books:
    get:
      summary: Get a list of books
      description: Returns a list of all available books in the library.
      operationId: books_get
      responses:
        "200":
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: Add a new book
      description: Creates a new book record in the library.
      operationId: books_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
        required: true
      responses:
        "201":
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                'Books added to the library ':
                  value: |-
                    {
                      "title": "Le Comte de Monte-Cristo",
                      "author": "Alexandre Dumas",
                      "isbn": "9785041159979",
                      "publicationYear": 2020,
                      "copiesAvailable": 5
                    }
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /books/{id}:
    get:
      summary: Get a book by ID
      description: Returns details of a specific book by its ID.
      operationId: books_id_get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "404":
          description: Book not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    put:
      summary: Update a book
      description: Updates the details of an existing book.
      operationId: books_id_put
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
        required: true
      responses:
        "200":
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      summary: Delete a book
      description: Deletes a book from the library by its ID.
      operationId: books_id_delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Book deleted successfully.
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users:
    get:
      summary: Get a list of users
      description: Returns a list of all registered users in the library system.
      operationId: users_get
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: Register a new user
      description: Creates a new user in the library system.
      operationId: users_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        "201":
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Example response:
                  value: |-
                    {
                      "name": "Виктор Афанасьевич Васильев",
                      "phoneNumber": "+79213856473"
                    }
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{id}:
    get:
      summary: Get a user by ID
      description: Returns details of a specific user by their ID.
      operationId: users_id_get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    put:
      summary: Update a user
      description: Updates the details of an existing user.
      operationId: users_id_put
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      summary: Delete a user
      description: Deletes a user from the library system by their ID.
      operationId: users_id_delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted successfully.
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rental:
    get:
      summary: Get a list of rental
      description: Returns a list of all current book rental.
      operationId: rental_get
      responses:
        "200":
          description: A list of rental.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: Create a new loan
      description: Issues a new book loan to a user.
      operationId: rental_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanInput'
        required: true
      responses:
        "201":
          description: Loan created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
              examples:
                Example response:
                  value: |-
                    {
                      "bookId": "0984",
                      "dueDate": "20-04-2024",
                      "id": "0465",
                      "loanDate": "20-04-2024",
                      "returnDate": "24-04-2024",
                      "userId": "345"
                    }
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /rental/{id}:
    get:
      summary: Get a loan by ID
      description: Returns details of a specific loan by its ID.
      operationId: rental_id_get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Loan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "404":
          description: Loan not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    put:
      summary: Update a loan
      description: "Updates the details of an existing loan (e.g., return date, status)."
      operationId: rental_id_put
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanInput'
        required: true
      responses:
        "200":
          description: Loan updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      summary: Delete a loan
      description: Deletes a loan from the system.
      operationId: rental_id_delete
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Loan deleted successfully.
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    Book:
      required:
      - author
      - copiesAvailable
      - id
      - isbn
      - title
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the book
        title:
          type: string
          description: Title of the book
        author:
          type: string
          description: Author of the book
        isbn:
          type: string
          description: ISBN number of the book
        publicationYear:
          type: integer
          description: Year the book was published
        copiesAvailable:
          type: integer
          description: Number of copies available for loan
      example:
        author: author
        copiesAvailable: 6
        isbn: isbn
        publicationYear: 0
        id: id
        title: title
    BookInput:
      required:
      - author
      - copiesAvailable
      - isbn
      - title
      type: object
      properties:
        title:
          type: string
          description: Title of the book
        author:
          type: string
          description: Author of the book
        isbn:
          type: string
          description: ISBN number of the book
        publicationYear:
          type: integer
          description: Year the book was published
        copiesAvailable:
          type: integer
          description: Number of copies available for loan
    User:
      required:
      - id
      - name
      - phoneNumber
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        phoneNumber:
          type: string
          description: User's phoneNumber
        membershipDate:
          type: string
          description: Date when the user registered
          format: date
      example:
        phoneNumber: phoneNumber
        name: name
        id: id
        membershipDate: 2000-01-23
    UserInput:
      required:
      - name
      - phoneNumber
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        phoneNumber:
          type: string
          description: User's phoneNumber
    Loan:
      required:
      - bookId
      - dueDate
      - id
      - loanDate
      - userId
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the loan
        userId:
          type: string
          description: ID of the user who borrowed the book
        bookId:
          type: string
          description: ID of the book being loaned
        loanDate:
          type: string
          description: Date when the loan started
          format: date
        dueDate:
          type: string
          description: Date when the loan is due
          format: date
        returnDate:
          type: string
          description: Date when the book was returned (if applicable)
          format: date
      example:
        returnDate: 2000-01-23
        dueDate: 2000-01-23
        loanDate: 2000-01-23
        id: id
        userId: userId
        bookId: bookId
    LoanInput:
      type: object

