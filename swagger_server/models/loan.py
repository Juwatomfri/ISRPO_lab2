# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Loan(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, user_id: str=None, book_id: str=None, loan_date: date=None, due_date: date=None, return_date: date=None):  # noqa: E501
        """Loan - a model defined in Swagger

        :param id: The id of this Loan.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this Loan.  # noqa: E501
        :type user_id: str
        :param book_id: The book_id of this Loan.  # noqa: E501
        :type book_id: str
        :param loan_date: The loan_date of this Loan.  # noqa: E501
        :type loan_date: date
        :param due_date: The due_date of this Loan.  # noqa: E501
        :type due_date: date
        :param return_date: The return_date of this Loan.  # noqa: E501
        :type return_date: date
        """
        self.swagger_types = {
            'id': str,
            'user_id': str,
            'book_id': str,
            'loan_date': date,
            'due_date': date,
            'return_date': date
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'userId',
            'book_id': 'bookId',
            'loan_date': 'loanDate',
            'due_date': 'dueDate',
            'return_date': 'returnDate'
        }
        self._id = id
        self._user_id = user_id
        self._book_id = book_id
        self._loan_date = loan_date
        self._due_date = due_date
        self._return_date = return_date

    @classmethod
    def from_dict(cls, dikt) -> 'Loan':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Loan of this Loan.  # noqa: E501
        :rtype: Loan
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Loan.

        Unique identifier for the loan  # noqa: E501

        :return: The id of this Loan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Loan.

        Unique identifier for the loan  # noqa: E501

        :param id: The id of this Loan.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Loan.

        ID of the user who borrowed the book  # noqa: E501

        :return: The user_id of this Loan.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Loan.

        ID of the user who borrowed the book  # noqa: E501

        :param user_id: The user_id of this Loan.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def book_id(self) -> str:
        """Gets the book_id of this Loan.

        ID of the book being loaned  # noqa: E501

        :return: The book_id of this Loan.
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id: str):
        """Sets the book_id of this Loan.

        ID of the book being loaned  # noqa: E501

        :param book_id: The book_id of this Loan.
        :type book_id: str
        """
        if book_id is None:
            raise ValueError("Invalid value for `book_id`, must not be `None`")  # noqa: E501

        self._book_id = book_id

    @property
    def loan_date(self) -> date:
        """Gets the loan_date of this Loan.

        Date when the loan started  # noqa: E501

        :return: The loan_date of this Loan.
        :rtype: date
        """
        return self._loan_date

    @loan_date.setter
    def loan_date(self, loan_date: date):
        """Sets the loan_date of this Loan.

        Date when the loan started  # noqa: E501

        :param loan_date: The loan_date of this Loan.
        :type loan_date: date
        """
        if loan_date is None:
            raise ValueError("Invalid value for `loan_date`, must not be `None`")  # noqa: E501

        self._loan_date = loan_date

    @property
    def due_date(self) -> date:
        """Gets the due_date of this Loan.

        Date when the loan is due  # noqa: E501

        :return: The due_date of this Loan.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: date):
        """Sets the due_date of this Loan.

        Date when the loan is due  # noqa: E501

        :param due_date: The due_date of this Loan.
        :type due_date: date
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def return_date(self) -> date:
        """Gets the return_date of this Loan.

        Date when the book was returned (if applicable)  # noqa: E501

        :return: The return_date of this Loan.
        :rtype: date
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date: date):
        """Sets the return_date of this Loan.

        Date when the book was returned (if applicable)  # noqa: E501

        :param return_date: The return_date of this Loan.
        :type return_date: date
        """

        self._return_date = return_date
